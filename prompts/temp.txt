I want to write one python project can play gomoku chess.
Create a class called GomokuBoard. This class will be responsible for keeping track of the board state and providing methods for updating the board state.
You should explain each function's input params and return params and functinality below the function definition.
```python
class GomokuBorad:
"""
 This class will be responsible for keeping track of the board state and providing methods for updating the board state.
"""
   def __init__(self, size):
        """
        Initializes the Gomoku Board with a given size.
        Input:
            size: The size of the board.
        Output:
            None
        """
        self.size = size
        self.board = [[0 for i in range(size)] for j in range(size)]

    def place_piece(self, row, col, player):
        """
        Places a piece on the board at the given row and column for the given player.
        Input:
            row: The row to place the piece.
            col: The column to place the piece.
            player: The player placing the piece (1 or 2).
        Output:
            None
        """
        self.board[row][col] = player

    def check_win(self, player):
        """
        Checks if the given player has won the game.
        Input:
            player: The player to check for a win (1 or 2).
        Output:
            True if the player has won, False otherwise.
        """
        # Check for horizontal wins
        for row in range(self.size):
            for col in range(self.size - 4):
                if self.board[row][col] == player and \
                        self.board[row][col + 1] == player and \
                        self.board[row][col + 2] == player and \
                        self.board[row][col + 3] == player and \
                        self.board[row][col + 4] == player:
                    return True

        # Check for vertical wins
        for row in range(self.size - 4):
            for col in range(self.size):
                if self.board[row][col] == player and \
                        self.board[row + 1][col] == player and \
                        self.board[row + 2][col] == player and \
                        self.board[row + 3][col] == player and \
                        self.board[row + 4][col] == player:
                    return True

        # Check for diagonal wins
        for row in range(self.size - 4):
            for col in range(self.size - 4):
                if self.board[row][col] == player and \
                        self.board[row + 1][col + 1] == player and \
                        self.board[row + 2][col + 2] == player and \
                        self.board[row + 3][col + 3] == player and \
                        self.board[row + 4][col + 4] == player:
                    return True

        # Check for reverse diagonal wins
        for row in range(self.size - 4):
            for col in range(4, self.size):
                if self.board[row][col] == player and \
                        self.board[row + 1][col - 1] == player and \
                        self.board[row + 2][col - 2] == player and \
                        self.board[row + 3][col - 3] == player and \
                        self.board[row + 4][col - 4] == player:
                    return True

        return False

    def get_board(self):
        """
        Returns the current board state.
        Input:
            None
        Output:
            The current board state.
        """
        return self.board

    def reset_board(self):
        """
        Resets the board to its initial state.
        Input:
            None
        Output:
            None
        """
        self.board = [[0 for i in range(self.size)] for j in range(self.size)]
```










I want to write one python project can play gomoku chess.
Now I have following steps to complete the task:
         Step 1:Create a class called GomokuBoard. This class will be responsible for keeping track of the board state and providing methods for updating the board state.
         Step 2:Create a class called Player. This class will be responsible for keeping track of the player's state and providing methods for making moves.
         Step 3:Create a class called Game. This class will be responsible for managing the game and providing methods for starting and ending the game.
         Step 4:Create a class called AI. This class will be responsible for providing methods for making moves based on a set of rules.
         Step 5:Create a function called main.This function will be responsible for setting up the game and running the game loop.
         Step 6:Create a function called bord_display.This function will be responsible for displaying the board state to the user.
         Step 7:Create a function called user_cli.This function will be responsible for taking user input and updating the board state accordingly.
         Step 8:Create a function called ai_cli.This function will be responsible for taking AI input and updating the board state accordingly.
         Step 9:Create a function called is_over.This function will be responsible for determining when the game is over.
         Step 10:Create a function called get_winner.This function will be responsible for determining who the winner is when game is over.
Now you need to specify the dependecy relationship between the functions and classes in above steps.
Answer me as following json format:
{
'class 1':[
   {
    'explanation':<<<your explanation why class 1 will use class 2>>>,
    'used_class':class 2'
    },
    {
    'explanation':<<<your explanation why class 1 will use function 2>>>,
    'used_function':'function 2'
    }
    ]
    ,
    'class 2':[
    ...
    ],
    ...
}
```json
{
'GomokuBoard':[
   {
    'explanation':'GomokuBoard will use Player class to keep track of the player's state and provide methods for making moves',
    'used_class':'Player'
    },
    {
    'explanation':'GomokuBoard will use Game class to manage the game and provide methods for starting and ending the game',
    'used_class':'Game'
    }
    ],
    'Player':[
    {
    'explanation':'Player will use Game class to manage the game and provide methods for starting and ending the game',
    'used_class':'Game'
    }
    ],
    'Game':[
    {
    'explanation':'Game will use GomokuBoard class to keep track of the board state and provide methods for updating the board state',
    'used_class':'GomokuBoard'
    },
    {
    'explanation':'Game will use AI class to provide methods for making moves based on a set of rules',
    'used_class':'AI'
    },
    {
    'explanation':'Game will use main function to set up the game and run the game loop',
    'used_function':'main'
    },
    {
    'explanation':'Game will use board_display function to display the board state to the user',
    'used_function':'board_display'
    },
    {
    'explanation':'Game will use user_cli function to take user input and update the board state accordingly',
    'used_function':'user_cli'
    },
    {
    'explanation':'Game will use ai_cli function to take AI input and update the board state accordingly',
    'used_function':'ai_cli'
    },
    {
    'explanation':'Game will use is_over function to determine when the game is over',
    'used_function':'is_over'
    },
    {
    'explanation':'Game will use get_winner function to determine who the winner is when game is over',
    'used_function':'get_winner'
    }
    ],
    'AI':[
    {
    'explanation':'AI will use Game class to manage the game and provide methods for starting and ending the game',
    'used_class':'Game'
    }
    ]
}
```